{"ast":null,"code":"var _jsxFileName = \"/Users/iashir/Desktop/WorkProjects/Recipe/client/src/components/register.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { showLoading } from \"./helper/loading\";\nimport { register } from \"../api/auth\";\nimport { isAuthenticated } from \"./helper/auth\";\nimport Validator from \"validator\";\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      password: \"\",\n      password2: \"\",\n      errors: {},\n      loading: false,\n      successMessage: \"\"\n    };\n\n    this.componentDidMount = () => {\n      if (isAuthenticated() && isAuthenticated().role === 1) {\n        this.props.history.push(\"/admin\");\n      } else if (isAuthenticated() && isAuthenticated().role === 0) {\n        this.props.history.push(\"/recipes\");\n      }\n    };\n\n    this.handleChange = e => {\n      const badInput = e.target.value;\n      var value = badInput.replace(/  +/g, \" \");\n      this.setState({\n        [e.target.id]: value\n      });\n      this.validateField(e.target.id, value);\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let {\n        username,\n        firstName,\n        lastName,\n        email,\n        password2,\n        password\n      } = this.state;\n      const newUser = {\n        username: username.trim(),\n        firstName: firstName.trim(),\n        lastName: lastName.trim(),\n        email: email.trim(),\n        password: password.trim(),\n        password2: password2.trim()\n      };\n      this.setState({\n        loading: true\n      });\n      register(newUser).then(res => {\n        this.setState({\n          loading: false,\n          successMessage: res.data.successMessage\n        });\n        this.props.history.push({\n          pathname: \"/login\",\n          state: {\n            username: newUser.username,\n            password: newUser.password\n          }\n        });\n      }) // re-direct to login on successful register\n      .catch(err => {\n        this.setState({\n          errors: err.response.data,\n          loading: false\n        });\n      });\n    };\n\n    this.validateField = (fieldName, value) => {\n      let {\n        errors,\n        password\n      } = this.state;\n      const passwordRegEx = new RegExp(\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$\");\n\n      switch (fieldName) {\n        case \"username\":\n          if (Validator.isEmpty(value)) {\n            errors.username = \"Username field is required\";\n            break;\n          }\n\n          if (!Validator.isLength(value, {\n            min: 3,\n            max: 15\n          })) {\n            errors.username = \"Username must be more than 3 and less than 15 characters\";\n            break;\n          }\n\n          errors.username = \"\";\n          break;\n\n        case \"firstName\":\n          if (Validator.isEmpty(value)) {\n            errors.firstName = \"First Name field is required\";\n            break;\n          } else if (!Validator.isAlpha(value)) {\n            errors.firstName = \"First Name must be letters only\";\n            break;\n          }\n\n          errors.firstName = \"\";\n          break;\n\n        case \"lastName\":\n          if (Validator.isEmpty(value)) {\n            errors.lastName = \"Last Name field is required\";\n            break;\n          } else if (!Validator.isAlpha(value)) {\n            errors.lastName = \"Last Name must be letters only\";\n            break;\n          }\n\n          errors.lastName = \"\";\n          break;\n\n        case \"email\":\n          if (Validator.isEmpty(value)) {\n            errors.email = \"Email field is required\";\n            break;\n          } else if (!Validator.isEmail(value)) {\n            errors.email = \"Email is invalid\";\n            break;\n          }\n\n          errors.email = \"\";\n          break;\n\n        case \"password\":\n          if (Validator.isEmpty(value)) {\n            errors.password = \"Password field is required\";\n            break;\n          }\n\n          if (!Validator.isLength(value, {\n            min: 6,\n            max: 30\n          })) {\n            errors.password = \"Password must be at least 6 and no more than 30 characters\";\n            break;\n          } else if (!passwordRegEx.test(value)) {\n            errors.password = \"Password must contain at least 1 uppercase, 1 lowercase, 1 numeric and 1 special character\";\n            break;\n          }\n\n          errors.password = \"\";\n          break;\n\n        case \"password2\":\n          if (Validator.isEmpty(value)) {\n            errors.password2 = \"Confirm password field is required\";\n            break;\n          }\n\n          if (!Validator.equals(password, value)) {\n            errors.password2 = \"Passwords must match\";\n            break;\n          }\n\n          errors.password2 = \"\";\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n  }\n\n  render() {\n    const {\n      errors,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    }, loading ? showLoading() : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, \"Register Form\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"col s12\",\n      noValidate: true,\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-field col s12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"username\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.username,\n      className: classnames(\"\", {\n        invalid: errors.username\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 23\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"red-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 23\n      }\n    }, errors.username))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-field col s6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"firstName\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.firstName,\n      className: classnames(\"\", {\n        invalid: errors.firstName\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"firstName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 23\n      }\n    }, \"First Name\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"red-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 23\n      }\n    }, errors.firstName)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-field col s6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"lastName\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.lastName,\n      className: classnames(\"\", {\n        invalid: errors.lastName\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"lastName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 23\n      }\n    }, \"Last Name\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"red-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 23\n      }\n    }, errors.lastName))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-field col s12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"email\",\n      onChange: this.handleChange,\n      value: this.state.email,\n      type: \"email\",\n      className: classnames(\"\", {\n        invalid: errors.email\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 23\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"red-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 23\n      }\n    }, errors.email))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-field col s12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"password\",\n      onChange: this.handleChange,\n      value: this.state.password,\n      type: \"password\",\n      className: classnames(\"\", {\n        invalid: errors.password\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 23\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"red-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 23\n      }\n    }, errors.password))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-field col s12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"password2\",\n      onChange: this.handleChange,\n      value: this.state.password2,\n      type: \"password\",\n      className: classnames(\"\", {\n        invalid: errors.password2\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"password2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 23\n      }\n    }, \"Confirm Password\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"red-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 23\n      }\n    }, errors.password2))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 19\n      }\n    }, errors.errorMessage ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-panel deep-orange\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 23\n      }\n    }, errors.errorMessage) : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn waves-effect waves-light\",\n      type: \"submit\",\n      name: \"action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      className: \"orange-effect orange btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }\n    }, \"Cancel\"))))))));\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Recipe/client/src/components/register.jsx"],"names":["React","Component","Link","classnames","showLoading","register","isAuthenticated","Validator","Register","state","username","email","firstName","lastName","password","password2","errors","loading","successMessage","componentDidMount","role","props","history","push","handleChange","e","badInput","target","value","replace","setState","id","validateField","handleSubmit","preventDefault","newUser","trim","then","res","data","pathname","catch","err","response","fieldName","passwordRegEx","RegExp","isEmpty","isLength","min","max","isAlpha","isEmail","test","equals","render","invalid","errorMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AACA,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BQ,KAD+B,GACvB;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,SAAS,EAAE,EAHL;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,QAAQ,EAAE,EALJ;AAMNC,MAAAA,SAAS,EAAE,EANL;AAONC,MAAAA,MAAM,EAAE,EAPF;AAQNC,MAAAA,OAAO,EAAE,KARH;AASNC,MAAAA,cAAc,EAAE;AATV,KADuB;;AAAA,SAY/BC,iBAZ+B,GAYX,MAAM;AACxB,UAAIb,eAAe,MAAMA,eAAe,GAAGc,IAAlB,KAA2B,CAApD,EAAuD;AACrD,aAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD,OAFD,MAEO,IAAIjB,eAAe,MAAMA,eAAe,GAAGc,IAAlB,KAA2B,CAApD,EAAuD;AAC5D,aAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,UAAxB;AACD;AACF,KAlB8B;;AAAA,SAmB/BC,YAnB+B,GAmBfC,CAAD,IAAO;AACpB,YAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA1B;AACA,UAAIA,KAAK,GAAGF,QAAQ,CAACG,OAAT,CAAiB,MAAjB,EAAyB,GAAzB,CAAZ;AACA,WAAKC,QAAL,CAAc;AAAE,SAACL,CAAC,CAACE,MAAF,CAASI,EAAV,GAAeH;AAAjB,OAAd;AACA,WAAKI,aAAL,CAAmBP,CAAC,CAACE,MAAF,CAASI,EAA5B,EAAgCH,KAAhC;AACD,KAxB8B;;AAAA,SAyB/BK,YAzB+B,GAyBfR,CAAD,IAAO;AACpBA,MAAAA,CAAC,CAACS,cAAF;AACA,UAAI;AACFxB,QAAAA,QADE;AAEFE,QAAAA,SAFE;AAGFC,QAAAA,QAHE;AAIFF,QAAAA,KAJE;AAKFI,QAAAA,SALE;AAMFD,QAAAA;AANE,UAOA,KAAKL,KAPT;AAQA,YAAM0B,OAAO,GAAG;AACdzB,QAAAA,QAAQ,EAAEA,QAAQ,CAAC0B,IAAT,EADI;AAEdxB,QAAAA,SAAS,EAAEA,SAAS,CAACwB,IAAV,EAFG;AAGdvB,QAAAA,QAAQ,EAAEA,QAAQ,CAACuB,IAAT,EAHI;AAIdzB,QAAAA,KAAK,EAAEA,KAAK,CAACyB,IAAN,EAJO;AAKdtB,QAAAA,QAAQ,EAAEA,QAAQ,CAACsB,IAAT,EALI;AAMdrB,QAAAA,SAAS,EAAEA,SAAS,CAACqB,IAAV;AANG,OAAhB;AAQA,WAAKN,QAAL,CAAc;AAAEb,QAAAA,OAAO,EAAE;AAAX,OAAd;AACAZ,MAAAA,QAAQ,CAAC8B,OAAD,CAAR,CACGE,IADH,CACSC,GAAD,IAAS;AACb,aAAKR,QAAL,CAAc;AACZb,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,cAAc,EAAEoB,GAAG,CAACC,IAAJ,CAASrB;AAFb,SAAd;AAIA,aAAKG,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB;AACtBiB,UAAAA,QAAQ,EAAE,QADY;AAEtB/B,UAAAA,KAAK,EAAE;AACLC,YAAAA,QAAQ,EAAEyB,OAAO,CAACzB,QADb;AAELI,YAAAA,QAAQ,EAAEqB,OAAO,CAACrB;AAFb;AAFe,SAAxB;AAOD,OAbH,EAaK;AAbL,OAcG2B,KAdH,CAcUC,GAAD,IAAS;AACd,aAAKZ,QAAL,CAAc;AACZd,UAAAA,MAAM,EAAE0B,GAAG,CAACC,QAAJ,CAAaJ,IADT;AAEZtB,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID,OAnBH;AAoBD,KAhE8B;;AAAA,SAkE/Be,aAlE+B,GAkEf,CAACY,SAAD,EAAYhB,KAAZ,KAAsB;AACpC,UAAI;AAAEZ,QAAAA,MAAF;AAAUF,QAAAA;AAAV,UAAuB,KAAKL,KAAhC;AACA,YAAMoC,aAAa,GAAG,IAAIC,MAAJ,CACpB,gEADoB,CAAtB;;AAGA,cAAQF,SAAR;AACE,aAAK,UAAL;AACE,cAAIrC,SAAS,CAACwC,OAAV,CAAkBnB,KAAlB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACN,QAAP,GAAkB,4BAAlB;AACA;AACD;;AACD,cAAI,CAACH,SAAS,CAACyC,QAAV,CAAmBpB,KAAnB,EAA0B;AAAEqB,YAAAA,GAAG,EAAE,CAAP;AAAUC,YAAAA,GAAG,EAAE;AAAf,WAA1B,CAAL,EAAqD;AACnDlC,YAAAA,MAAM,CAACN,QAAP,GACE,0DADF;AAEA;AACD;;AACDM,UAAAA,MAAM,CAACN,QAAP,GAAkB,EAAlB;AACA;;AACF,aAAK,WAAL;AACE,cAAIH,SAAS,CAACwC,OAAV,CAAkBnB,KAAlB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACJ,SAAP,GAAmB,8BAAnB;AACA;AACD,WAHD,MAGO,IAAI,CAACL,SAAS,CAAC4C,OAAV,CAAkBvB,KAAlB,CAAL,EAA+B;AACpCZ,YAAAA,MAAM,CAACJ,SAAP,GAAmB,iCAAnB;AACA;AACD;;AACDI,UAAAA,MAAM,CAACJ,SAAP,GAAmB,EAAnB;AACA;;AACF,aAAK,UAAL;AACE,cAAIL,SAAS,CAACwC,OAAV,CAAkBnB,KAAlB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACH,QAAP,GAAkB,6BAAlB;AACA;AACD,WAHD,MAGO,IAAI,CAACN,SAAS,CAAC4C,OAAV,CAAkBvB,KAAlB,CAAL,EAA+B;AACpCZ,YAAAA,MAAM,CAACH,QAAP,GAAkB,gCAAlB;AACA;AACD;;AACDG,UAAAA,MAAM,CAACH,QAAP,GAAkB,EAAlB;AACA;;AACF,aAAK,OAAL;AACE,cAAIN,SAAS,CAACwC,OAAV,CAAkBnB,KAAlB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACL,KAAP,GAAe,yBAAf;AACA;AACD,WAHD,MAGO,IAAI,CAACJ,SAAS,CAAC6C,OAAV,CAAkBxB,KAAlB,CAAL,EAA+B;AACpCZ,YAAAA,MAAM,CAACL,KAAP,GAAe,kBAAf;AACA;AACD;;AACDK,UAAAA,MAAM,CAACL,KAAP,GAAe,EAAf;AACA;;AACF,aAAK,UAAL;AACE,cAAIJ,SAAS,CAACwC,OAAV,CAAkBnB,KAAlB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACF,QAAP,GAAkB,4BAAlB;AACA;AACD;;AACD,cAAI,CAACP,SAAS,CAACyC,QAAV,CAAmBpB,KAAnB,EAA0B;AAAEqB,YAAAA,GAAG,EAAE,CAAP;AAAUC,YAAAA,GAAG,EAAE;AAAf,WAA1B,CAAL,EAAqD;AACnDlC,YAAAA,MAAM,CAACF,QAAP,GACE,4DADF;AAEA;AACD,WAJD,MAIO,IAAI,CAAC+B,aAAa,CAACQ,IAAd,CAAmBzB,KAAnB,CAAL,EAAgC;AACrCZ,YAAAA,MAAM,CAACF,QAAP,GACE,4FADF;AAEA;AACD;;AACDE,UAAAA,MAAM,CAACF,QAAP,GAAkB,EAAlB;AACA;;AACF,aAAK,WAAL;AACE,cAAIP,SAAS,CAACwC,OAAV,CAAkBnB,KAAlB,CAAJ,EAA8B;AAC5BZ,YAAAA,MAAM,CAACD,SAAP,GAAmB,oCAAnB;AACA;AACD;;AACD,cAAI,CAACR,SAAS,CAAC+C,MAAV,CAAiBxC,QAAjB,EAA2Bc,KAA3B,CAAL,EAAwC;AACtCZ,YAAAA,MAAM,CAACD,SAAP,GAAmB,sBAAnB;AACA;AACD;;AACDC,UAAAA,MAAM,CAACD,SAAP,GAAmB,EAAnB;AACA;;AACF;AACE;AAvEJ;;AAyEA,WAAKe,QAAL,CAAc;AAAEd,QAAAA;AAAF,OAAd;AACD,KAjJ8B;AAAA;;AAmJ/BuC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEvC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsB,KAAKR,KAAjC;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGQ,OAAO,GAAGb,WAAW,EAAd,GAAmB,IAD7B,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,eAKE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,SADZ;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,QAAQ,EAAE,KAAK6B,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAE,KAAKT,YAHjB;AAIE,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWC,QAJpB;AAKE,MAAA,SAAS,EAAEP,UAAU,CAAC,EAAD,EAAK;AACxBqD,QAAAA,OAAO,EAAExC,MAAM,CAACN;AADQ,OAAL,CALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAUE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF,eAWE;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BM,MAAM,CAACN,QAAnC,CAXF,CADF,CALF,eAqBE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAE,KAAKc,YAHjB;AAIE,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWG,SAJpB;AAKE,MAAA,SAAS,EAAET,UAAU,CAAC,EAAD,EAAK;AACxBqD,QAAAA,OAAO,EAAExC,MAAM,CAACJ;AADQ,OAAL,CALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAUE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,eAWE;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BI,MAAM,CAACJ,SAAnC,CAXF,CADF,eAeE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAE,KAAKY,YAHjB;AAIE,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWI,QAJpB;AAKE,MAAA,SAAS,EAAEV,UAAU,CAAC,EAAD,EAAK;AACxBqD,QAAAA,OAAO,EAAExC,MAAM,CAACH;AADQ,OAAL,CALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAUE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAVF,eAWE;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BG,MAAM,CAACH,QAAnC,CAXF,CAfF,CArBF,eAmDE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,EAAE,EAAC,OADL;AAEE,MAAA,QAAQ,EAAE,KAAKW,YAFjB;AAGE,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWE,KAHpB;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,MAAA,SAAS,EAAER,UAAU,CAAC,EAAD,EAAK;AACxBqD,QAAAA,OAAO,EAAExC,MAAM,CAACL;AADQ,OAAL,CALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAUE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVF,eAWE;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BK,MAAM,CAACL,KAAnC,CAXF,CADF,CAnDF,eAmEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,QAAQ,EAAE,KAAKa,YAFjB;AAGE,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWK,QAHpB;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,SAAS,EAAEX,UAAU,CAAC,EAAD,EAAK;AACxBqD,QAAAA,OAAO,EAAExC,MAAM,CAACF;AADQ,OAAL,CALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAUE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF,eAWE;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BE,MAAM,CAACF,QAAnC,CAXF,CADF,CAnEF,eAmFE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,QAAQ,EAAE,KAAKU,YAFjB;AAGE,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWM,SAHpB;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,SAAS,EAAEZ,UAAU,CAAC,EAAD,EAAK;AACxBqD,QAAAA,OAAO,EAAExC,MAAM,CAACD;AADQ,OAAL,CALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAUE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAVF,eAWE;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BC,MAAM,CAACD,SAAnC,CAXF,CADF,CAnFF,eAmGE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,MAAM,CAACyC,YAAP,gBACC;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGzC,MAAM,CAACyC,YADV,CADD,GAIG,IALN,CAnGF,eA2GE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,8BADZ;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,0BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,CA3GF,CADF,CALF,CADF,CADF,CAFF,CADF;AA0ID;;AA/R8B;;AAkSjC,eAAejD,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { showLoading } from \"./helper/loading\";\nimport { register } from \"../api/auth\";\nimport { isAuthenticated } from \"./helper/auth\";\nimport Validator from \"validator\";\nclass Register extends Component {\n  state = {\n    username: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    password: \"\",\n    password2: \"\",\n    errors: {},\n    loading: false,\n    successMessage: \"\",\n  };\n  componentDidMount = () => {\n    if (isAuthenticated() && isAuthenticated().role === 1) {\n      this.props.history.push(\"/admin\");\n    } else if (isAuthenticated() && isAuthenticated().role === 0) {\n      this.props.history.push(\"/recipes\");\n    }\n  };\n  handleChange = (e) => {\n    const badInput = e.target.value;\n    var value = badInput.replace(/  +/g, \" \");\n    this.setState({ [e.target.id]: value });\n    this.validateField(e.target.id, value);\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let {\n      username,\n      firstName,\n      lastName,\n      email,\n      password2,\n      password,\n    } = this.state;\n    const newUser = {\n      username: username.trim(),\n      firstName: firstName.trim(),\n      lastName: lastName.trim(),\n      email: email.trim(),\n      password: password.trim(),\n      password2: password2.trim(),\n    };\n    this.setState({ loading: true });\n    register(newUser)\n      .then((res) => {\n        this.setState({\n          loading: false,\n          successMessage: res.data.successMessage,\n        });\n        this.props.history.push({\n          pathname: \"/login\",\n          state: {\n            username: newUser.username,\n            password: newUser.password,\n          },\n        });\n      }) // re-direct to login on successful register\n      .catch((err) => {\n        this.setState({\n          errors: err.response.data,\n          loading: false,\n        });\n      });\n  };\n\n  validateField = (fieldName, value) => {\n    let { errors, password } = this.state;\n    const passwordRegEx = new RegExp(\n      \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$\"\n    );\n    switch (fieldName) {\n      case \"username\":\n        if (Validator.isEmpty(value)) {\n          errors.username = \"Username field is required\";\n          break;\n        }\n        if (!Validator.isLength(value, { min: 3, max: 15 })) {\n          errors.username =\n            \"Username must be more than 3 and less than 15 characters\";\n          break;\n        }\n        errors.username = \"\";\n        break;\n      case \"firstName\":\n        if (Validator.isEmpty(value)) {\n          errors.firstName = \"First Name field is required\";\n          break;\n        } else if (!Validator.isAlpha(value)) {\n          errors.firstName = \"First Name must be letters only\";\n          break;\n        }\n        errors.firstName = \"\";\n        break;\n      case \"lastName\":\n        if (Validator.isEmpty(value)) {\n          errors.lastName = \"Last Name field is required\";\n          break;\n        } else if (!Validator.isAlpha(value)) {\n          errors.lastName = \"Last Name must be letters only\";\n          break;\n        }\n        errors.lastName = \"\";\n        break;\n      case \"email\":\n        if (Validator.isEmpty(value)) {\n          errors.email = \"Email field is required\";\n          break;\n        } else if (!Validator.isEmail(value)) {\n          errors.email = \"Email is invalid\";\n          break;\n        }\n        errors.email = \"\";\n        break;\n      case \"password\":\n        if (Validator.isEmpty(value)) {\n          errors.password = \"Password field is required\";\n          break;\n        }\n        if (!Validator.isLength(value, { min: 6, max: 30 })) {\n          errors.password =\n            \"Password must be at least 6 and no more than 30 characters\";\n          break;\n        } else if (!passwordRegEx.test(value)) {\n          errors.password =\n            \"Password must contain at least 1 uppercase, 1 lowercase, 1 numeric and 1 special character\";\n          break;\n        }\n        errors.password = \"\";\n        break;\n      case \"password2\":\n        if (Validator.isEmpty(value)) {\n          errors.password2 = \"Confirm password field is required\";\n          break;\n        }\n        if (!Validator.equals(password, value)) {\n          errors.password2 = \"Passwords must match\";\n          break;\n        }\n        errors.password2 = \"\";\n        break;\n      default:\n        break;\n    }\n    this.setState({ errors });\n  };\n\n  render() {\n    const { errors, loading } = this.state;\n    return (\n      <React.Fragment>\n        {loading ? showLoading() : null}\n        <div className=\"container\">\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"row\">\n                <h3>Register Form</h3>\n              </div>\n\n              <div className=\"row\">\n                <form\n                  className=\"col s12\"\n                  noValidate\n                  onSubmit={this.handleSubmit}\n                >\n                  <div className=\"row\">\n                    <div className=\"input-field col s12\">\n                      <input\n                        id=\"username\"\n                        type=\"text\"\n                        onChange={this.handleChange}\n                        value={this.state.username}\n                        className={classnames(\"\", {\n                          invalid: errors.username,\n                        })}\n                      />\n                      <label htmlFor=\"username\">Username</label>\n                      <span className=\"red-text\">{errors.username}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"input-field col s6\">\n                      <input\n                        id=\"firstName\"\n                        type=\"text\"\n                        onChange={this.handleChange}\n                        value={this.state.firstName}\n                        className={classnames(\"\", {\n                          invalid: errors.firstName,\n                        })}\n                      />\n                      <label htmlFor=\"firstName\">First Name</label>\n                      <span className=\"red-text\">{errors.firstName}</span>\n                    </div>\n\n                    <div className=\"input-field col s6\">\n                      <input\n                        id=\"lastName\"\n                        type=\"text\"\n                        onChange={this.handleChange}\n                        value={this.state.lastName}\n                        className={classnames(\"\", {\n                          invalid: errors.lastName,\n                        })}\n                      />\n                      <label htmlFor=\"lastName\">Last Name</label>\n                      <span className=\"red-text\">{errors.lastName}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"input-field col s12\">\n                      <input\n                        id=\"email\"\n                        onChange={this.handleChange}\n                        value={this.state.email}\n                        type=\"email\"\n                        className={classnames(\"\", {\n                          invalid: errors.email,\n                        })}\n                      />\n                      <label htmlFor=\"email\">Email</label>\n                      <span className=\"red-text\">{errors.email}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"input-field col s12\">\n                      <input\n                        id=\"password\"\n                        onChange={this.handleChange}\n                        value={this.state.password}\n                        type=\"password\"\n                        className={classnames(\"\", {\n                          invalid: errors.password,\n                        })}\n                      />\n                      <label htmlFor=\"password\">Password</label>\n                      <span className=\"red-text\">{errors.password}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"input-field col s12\">\n                      <input\n                        id=\"password2\"\n                        onChange={this.handleChange}\n                        value={this.state.password2}\n                        type=\"password\"\n                        className={classnames(\"\", {\n                          invalid: errors.password2,\n                        })}\n                      />\n                      <label htmlFor=\"password2\">Confirm Password</label>\n                      <span className=\"red-text\">{errors.password2}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    {errors.errorMessage ? (\n                      <div className=\"card-panel deep-orange\">\n                        {errors.errorMessage}\n                      </div>\n                    ) : null}\n                  </div>\n\n                  <div className=\"row\">\n                    <button\n                      className=\"btn waves-effect waves-light\"\n                      type=\"submit\"\n                      name=\"action\"\n                    >\n                      Submit\n                    </button>\n\n                    <Link to=\"/\" className=\"orange-effect orange btn\">\n                      Cancel\n                    </Link>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}