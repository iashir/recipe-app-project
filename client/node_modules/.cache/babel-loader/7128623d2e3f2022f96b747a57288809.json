{"ast":null,"code":"var _jsxFileName = \"/Users/iashir/Desktop/WorkProjects/Recipe/client/src/components/recipePage/sections/comment.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport SingleComment from \"./singleComment\";\nimport CommentInput from \"./commentInput\";\nimport { toast } from \"react-toastify\";\nimport { isAuthenticated } from \"../../helper/auth\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { showLoading } from \"../../helper/loading\";\n\nconst imageProf = require(\"../../../public/uploads/chef2.jpg\");\n\nconst Comments = () => {\n  const recipe = useParams();\n  const [newComment, setnewComment] = useState(\"\");\n  const [newReplyComment, setnewReplyComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [repliedComments, setRepliedComments] = useState([]);\n  const [openReply, setOpenReply] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [replyId, setReplyId] = useState(\"\");\n  const [parentCommentId, setParentCommentId] = useState(\"\");\n  const [responseTo, setResponseTo] = useState(\"\");\n  const [commentsAdded, setCommentsAdded] = useState(0); ///////////////////////////////////////////\n\n  useEffect(() => {\n    setLoading(true);\n    axios.get(\"/api/comment/\" + recipe.id).then(({\n      data\n    }) => {\n      setComments(data.comments.reverse());\n      setRepliedComments(data.repliedComments);\n      setLoading(false);\n    }).catch(err => {\n      toast.error(\"Unable to load comments\");\n    });\n  }, [commentsAdded, recipe.id]); /////////////////////////////////////////\n\n  const handleComment = e => {\n    e.preventDefault();\n\n    if (!isAuthenticated()) {\n      return toast.error(`Please login`, {\n        position: \"bottom-center\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n\n    const {\n      _id\n    } = JSON.parse(localStorage.user);\n    let comment = e.target.name === \"newReplyComment\" || replyId === e.target.id ? newReplyComment : newComment;\n    let obj = {};\n\n    if (e.target.name === \"newReplyComment\" && parentCommentId !== \"\") {\n      obj = {\n        user: _id,\n        content: comment,\n        recipe: recipe.id,\n        responseTo: responseTo,\n        parentComment: parentCommentId\n      };\n    } else {\n      obj = {\n        user: _id,\n        content: comment,\n        recipe: recipe.id\n      };\n    }\n\n    let name = e.target.name;\n\n    if (comment === \"\") {\n      return toast.error(\"empty comment\");\n    }\n\n    setLoading(true); // this.setState({ loading: true });\n\n    axios.post(\"/api/comment/\" + recipe.id, obj).then(res => {\n      if (res.data.success) {\n        console.log(res.data);\n        setOpenReply(false);\n        setLoading(false);\n\n        if (name === \"newComment\") {\n          setnewComment(\"\");\n        } else {\n          setnewReplyComment(\"\");\n        }\n\n        setCommentsAdded(commentsAdded + 1);\n      }\n    }).catch(error => {\n      toast.error(\"Error occured while posting comment\");\n    });\n  }; ///////////////////////////////////////////\n\n\n  const handleChange = e => {\n    if (e.target.name === \"newComment\") {\n      setnewComment(e.target.value);\n    } else {\n      setnewReplyComment(e.target.value);\n    } // this.setState({ [e.target.name]: e.target.value });\n\n  }; ///////////////////////////////////////////\n\n\n  const showReplyInput = (replyId, parentCommentId, responseTo) => {\n    setOpenReply(!openReply);\n    setReplyId(replyId);\n    setParentCommentId(parentCommentId);\n    setResponseTo(responseTo);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, loading ? showLoading() : null, /*#__PURE__*/React.createElement(CommentInput, {\n    onSubmit: handleComment,\n    onChange: handleChange,\n    value: newComment,\n    name: \"newComment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SingleComment, {\n    comments: comments,\n    imageProf: imageProf,\n    showReplyInput: showReplyInput,\n    openReply: openReply,\n    onSubmit: handleComment,\n    onChange: handleChange,\n    replyId: replyId,\n    newReplyComment: newReplyComment,\n    repliedComments: repliedComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Comments;","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Recipe/client/src/components/recipePage/sections/comment.jsx"],"names":["React","useState","useEffect","SingleComment","CommentInput","toast","isAuthenticated","axios","useParams","showLoading","imageProf","require","Comments","recipe","newComment","setnewComment","newReplyComment","setnewReplyComment","comments","setComments","repliedComments","setRepliedComments","openReply","setOpenReply","loading","setLoading","replyId","setReplyId","parentCommentId","setParentCommentId","responseTo","setResponseTo","commentsAdded","setCommentsAdded","get","id","then","data","reverse","catch","err","error","handleComment","e","preventDefault","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","_id","JSON","parse","localStorage","user","comment","target","name","obj","content","parentComment","post","res","success","console","log","handleChange","value","showReplyInput"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SingleComment from \"./singleComment\";\nimport CommentInput from \"./commentInput\";\nimport { toast } from \"react-toastify\";\nimport { isAuthenticated } from \"../../helper/auth\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { showLoading } from \"../../helper/loading\";\nconst imageProf = require(\"../../../public/uploads/chef2.jpg\");\nconst Comments = () => {\n  const recipe = useParams();\n  const [newComment, setnewComment] = useState(\"\");\n  const [newReplyComment, setnewReplyComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [repliedComments, setRepliedComments] = useState([]);\n  const [openReply, setOpenReply] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [replyId, setReplyId] = useState(\"\");\n  const [parentCommentId, setParentCommentId] = useState(\"\");\n  const [responseTo, setResponseTo] = useState(\"\");\n  const [commentsAdded, setCommentsAdded] = useState(0);\n  ///////////////////////////////////////////\n  useEffect(() => {\n    setLoading(true);\n    axios\n      .get(\"/api/comment/\" + recipe.id)\n      .then(({ data }) => {\n        setComments(data.comments.reverse());\n        setRepliedComments(data.repliedComments);\n        setLoading(false);\n      })\n      .catch((err) => {\n        toast.error(\"Unable to load comments\");\n      });\n  }, [commentsAdded, recipe.id]);\n\n  /////////////////////////////////////////\n  const handleComment = (e) => {\n    e.preventDefault();\n    if (!isAuthenticated()) {\n      return toast.error(`Please login`, {\n        position: \"bottom-center\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n\n    const { _id } = JSON.parse(localStorage.user);\n    let comment =\n      e.target.name === \"newReplyComment\" || replyId === e.target.id\n        ? newReplyComment\n        : newComment;\n    let obj = {};\n    if (e.target.name === \"newReplyComment\" && parentCommentId !== \"\") {\n      obj = {\n        user: _id,\n        content: comment,\n        recipe: recipe.id,\n        responseTo: responseTo,\n        parentComment: parentCommentId,\n      };\n    } else {\n      obj = {\n        user: _id,\n        content: comment,\n        recipe: recipe.id,\n      };\n    }\n\n    let name = e.target.name;\n    if (comment === \"\") {\n      return toast.error(\"empty comment\");\n    }\n    setLoading(true);\n    // this.setState({ loading: true });\n    axios\n      .post(\"/api/comment/\" + recipe.id, obj)\n      .then((res) => {\n        if (res.data.success) {\n          console.log(res.data);\n          setOpenReply(false);\n          setLoading(false);\n          if (name === \"newComment\") {\n            setnewComment(\"\");\n          } else {\n            setnewReplyComment(\"\");\n          }\n          setCommentsAdded(commentsAdded + 1);\n        }\n      })\n      .catch((error) => {\n        toast.error(\"Error occured while posting comment\");\n      });\n  };\n\n  ///////////////////////////////////////////\n  const handleChange = (e) => {\n    if (e.target.name === \"newComment\") {\n      setnewComment(e.target.value);\n    } else {\n      setnewReplyComment(e.target.value);\n    }\n    // this.setState({ [e.target.name]: e.target.value });\n  };\n\n  ///////////////////////////////////////////\n  const showReplyInput = (replyId, parentCommentId, responseTo) => {\n    setOpenReply(!openReply);\n    setReplyId(replyId);\n    setParentCommentId(parentCommentId);\n    setResponseTo(responseTo);\n  };\n\n  return (\n    <React.Fragment>\n      {loading ? showLoading() : null}\n      <CommentInput\n        onSubmit={handleComment}\n        onChange={handleChange}\n        value={newComment}\n        name=\"newComment\"\n      />\n      <SingleComment\n        comments={comments}\n        imageProf={imageProf}\n        showReplyInput={showReplyInput}\n        openReply={openReply}\n        onSubmit={handleComment}\n        onChange={handleChange}\n        replyId={replyId}\n        newReplyComment={newReplyComment}\n        repliedComments={repliedComments}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}