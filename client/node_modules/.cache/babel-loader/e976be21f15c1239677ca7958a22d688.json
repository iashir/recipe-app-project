{"ast":null,"code":"var _jsxFileName = \"/Users/iashir/Desktop/WorkProjects/Recipe/client/src/components/recipePage/sections/singleComment.jsx\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport { Header, Comment } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport ReplyComments from \"./replyComments\";\nimport CommentInput from \"./commentInput\";\nimport LikeDislike from \"../../common/LikeDislike\";\n\nconst SingleComment = ({\n  comments,\n  imageProf,\n  showReplyInput,\n  openReply,\n  onChange,\n  onSubmit,\n  newReplyComment,\n  replyId,\n  repliedComments\n}) => {\n  let userId;\n\n  if (localStorage.getItem(\"user\")) {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    userId = user._id;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h3\",\n    dividing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \"Comments\"), comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n    key: comment._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n    src: comment.user.image === \"\" ? imageProf : comment.user.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Author, {\n    as: Link,\n    to: \"/account/\" + comment.user._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }, comment.user.username), /*#__PURE__*/React.createElement(Comment.Metadata, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, moment(comment.createdAt).format(\"LLLL\"))), /*#__PURE__*/React.createElement(Comment.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, comment.content)), /*#__PURE__*/React.createElement(Comment.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(LikeDislike, {\n    comment: true,\n    commentId: comment._id,\n    userId: localStorage.getItem(\"user\") ? userId : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Action, {\n    onClick: () => showReplyInput(comment._id, comment._id, comment.user._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"Reply\"), openReply && replyId === comment._id ? /*#__PURE__*/React.createElement(CommentInput, {\n    onSubmit: onSubmit,\n    onChange: onChange,\n    value: newReplyComment,\n    name: \"newReplyComment\",\n    replyId: replyId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }\n  }) : null)), repliedComments.map(repliedComment => repliedComment.parentComment === comment._id ? /*#__PURE__*/React.createElement(React.Fragment, {\n    key: repliedComment._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ReplyComments, {\n    comment: repliedComment,\n    imageProf: imageProf,\n    showReplyInput: showReplyInput,\n    openReply: openReply,\n    onSubmit: onSubmit,\n    onChange: onChange,\n    newReplyComment: newReplyComment,\n    replyId: replyId,\n    parentCommentId: comment._id,\n    userId: userId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  })) : null)))));\n};\n\nexport default SingleComment;","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Recipe/client/src/components/recipePage/sections/singleComment.jsx"],"names":["React","moment","Header","Comment","Link","ReplyComments","CommentInput","LikeDislike","SingleComment","comments","imageProf","showReplyInput","openReply","onChange","onSubmit","newReplyComment","replyId","repliedComments","userId","localStorage","getItem","user","JSON","parse","_id","map","comment","image","username","createdAt","format","content","repliedComment","parentComment"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport { Header, Comment } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport ReplyComments from \"./replyComments\";\nimport CommentInput from \"./commentInput\";\nimport LikeDislike from \"../../common/LikeDislike\";\nconst SingleComment = ({\n  comments,\n  imageProf,\n  showReplyInput,\n  openReply,\n  onChange,\n  onSubmit,\n  newReplyComment,\n  replyId,\n  repliedComments,\n}) => {\n  let userId;\n  if (localStorage.getItem(\"user\")) {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    userId = user._id;\n  }\n  return (\n    <div className=\"row\">\n      <Comment.Group>\n        <Header as=\"h3\" dividing>\n          Comments\n        </Header>\n        {comments.map((comment) => (\n          <Comment key={comment._id}>\n            <Comment.Avatar\n              src={comment.user.image === \"\" ? imageProf : comment.user.image}\n            />\n            <Comment.Content>\n              <Comment.Author as={Link} to={\"/account/\" + comment.user._id}>\n                {comment.user.username}\n              </Comment.Author>\n              <Comment.Metadata>\n                <div>{moment(comment.createdAt).format(\"LLLL\")}</div>\n              </Comment.Metadata>\n              <Comment.Text>\n                <p>{comment.content}</p>\n              </Comment.Text>\n              <Comment.Actions>\n                <LikeDislike\n                  comment\n                  commentId={comment._id}\n                  userId={localStorage.getItem(\"user\") ? userId : null}\n                />\n                <Comment.Action\n                  onClick={() =>\n                    showReplyInput(comment._id, comment._id, comment.user._id)\n                  }\n                >\n                  Reply\n                </Comment.Action>\n                {openReply && replyId === comment._id ? (\n                  <CommentInput\n                    onSubmit={onSubmit}\n                    onChange={onChange}\n                    value={newReplyComment}\n                    name=\"newReplyComment\"\n                    replyId={replyId}\n                  />\n                ) : null}\n              </Comment.Actions>\n            </Comment.Content>\n            {repliedComments.map((repliedComment) =>\n              repliedComment.parentComment === comment._id ? (\n                <React.Fragment key={repliedComment._id}>\n                  <ReplyComments\n                    comment={repliedComment}\n                    imageProf={imageProf}\n                    showReplyInput={showReplyInput}\n                    openReply={openReply}\n                    onSubmit={onSubmit}\n                    onChange={onChange}\n                    newReplyComment={newReplyComment}\n                    replyId={replyId}\n                    parentCommentId={comment._id}\n                    userId={userId}\n                  />\n                </React.Fragment>\n              ) : null\n            )}\n          </Comment>\n        ))}\n      </Comment.Group>\n    </div>\n  );\n};\n\nexport default SingleComment;\n"]},"metadata":{},"sourceType":"module"}